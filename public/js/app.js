// Generated by CoffeeScript 1.4.0
(function() {
  var App, Category, Glue, Gui, Restaurant, ServerSide, UseCase,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Restaurant = (function() {

    function Restaurant(name) {
      this.name = name;
    }

    return Restaurant;

  })();

  Category = (function() {

    function Category(name) {
      this.name = name;
    }

    return Category;

  })();

  ServerSide = (function() {

    function ServerSide() {
      this.categoriesFromJson = __bind(this.categoriesFromJson, this);

      this.getCategories = __bind(this.getCategories, this);

      this.restaurantsFromJson = __bind(this.restaurantsFromJson, this);

      this.getRestarantsForCity = __bind(this.getRestarantsForCity, this);

    }

    ServerSide.prototype.getRestarantsForCity = function(city_name) {
      var _this = this;
      return $.ajax({
        type: "GET",
        url: "http://localhost:3000/city.json",
        success: function(restaurantsJson) {
          console.log("success");
          console.log(restaurantsJson);
          return _this.restaurantsLoaded(_this.restaurantsFromJson(restaurantsJson));
        },
        error: function() {
          return console.log("fail");
        }
      });
    };

    ServerSide.prototype.restaurantsFromJson = function(json) {
      return json.map(function(s) {
        return new Restaurant(s);
      });
    };

    ServerSide.prototype.restaurantsLoaded = function(restaurants) {};

    ServerSide.prototype.getCategories = function() {
      var _this = this;
      return $.ajax({
        type: "GET",
        url: "http://localhost:3000/city.json",
        success: function(categoriesJson) {
          console.log("success");
          console.log(categoriesJson);
          return _this.categoriesLoaded(_this.categoriesFromJson(categoriesJson));
        },
        error: function() {
          return console.log("fail");
        }
      });
    };

    ServerSide.prototype.categoriesFromJson = function(json) {
      return json.map(function(s) {
        return new Category(s);
      });
    };

    ServerSide.prototype.categoriesLoaded = function(categories) {};

    return ServerSide;

  })();

  UseCase = (function() {

    function UseCase() {
      this.setRestaurants = __bind(this.setRestaurants, this);

      this.getRestarantsForCity = __bind(this.getRestarantsForCity, this);

      this.setCategories = __bind(this.setCategories, this);

      this.getCategories = __bind(this.getCategories, this);

      this.start = __bind(this.start, this);

      this.findCategories = __bind(this.findCategories, this);

      this.findRestaurants = __bind(this.findRestaurants, this);

    }

    UseCase.prototype.constustor = function() {
      this.restaurants = [];
      return this.categories = [];
    };

    UseCase.prototype.findRestaurants = function(city_name) {
      return this.getRestarantsForCity(city_name);
    };

    UseCase.prototype.findCategories = function() {
      return this.getCategories();
    };

    UseCase.prototype.start = function() {};

    UseCase.prototype.getCategories = function() {};

    UseCase.prototype.setCategories = function(categories) {
      this.categories = categories;
    };

    UseCase.prototype.getRestarantsForCity = function(city_name) {};

    UseCase.prototype.setRestaurants = function(restaurants) {
      this.restaurants = restaurants;
    };

    return UseCase;

  })();

  Gui = (function() {

    function Gui() {
      this.afterMoveFormSearch = __bind(this.afterMoveFormSearch, this);

      this.findRestaurants = __bind(this.findRestaurants, this);

      this._createElementFor = __bind(this._createElementFor, this);

      this.onSubmitLocation = __bind(this.onSubmitLocation, this);

      this.hiddenCategories = __bind(this.hiddenCategories, this);

      this.getAllCategoriesToSearch = __bind(this.getAllCategoriesToSearch, this);

      this.addCategoryToList = __bind(this.addCategoryToList, this);

      this.addCategoryToSearch = __bind(this.addCategoryToSearch, this);

      this.addCategories = __bind(this.addCategories, this);

      this.showCategories = __bind(this.showCategories, this);

      this.moveFormSearch = __bind(this.moveFormSearch, this);

      this.showRestaurants = __bind(this.showRestaurants, this);

      this.showCityForm = __bind(this.showCityForm, this);

    }

    Gui.prototype.showCityForm = function() {
      var element;
      element = this._createElementFor("#city-form-template");
      $("#main").append(element);
      $("#city_form").fadeIn(500);
      return $("#city_form").submit(this.onSubmitLocation);
    };

    Gui.prototype.showRestaurants = function(restaurants) {
      var _this = this;
      $("#city_form .form-signin").animate({
        'margin-top': '-120px',
        'padding-top': '160px'
      });
      return $("#city_form").animate({
        top: '0px',
        right: '0px',
        width: '400px'
      }).animate({
        height: '100%'
      }, 500, 'linear', function() {
        var element, i, r, _i, _len;
        i = 500;
        for (_i = 0, _len = restaurants.length; _i < _len; _i++) {
          r = restaurants[_i];
          element = _this._createElementFor("#restaurant-label", {
            restaurant: r
          }).fadeIn(i);
          $("#restaurants-list").append(element);
          i = i + 500;
        }
        element = _this._createElementFor("#search-form-template");
        $("#main").append(element);
        $("#search_form").fadeIn(1500);
        $("#add-category").click(_this.moveFormSearch);
        return $(".nano").nanoScroller();
      });
    };

    Gui.prototype.moveFormSearch = function() {
      var _this = this;
      return $("#search_form").animate({
        left: '5%'
      }, function() {
        return _this.afterMoveFormSearch();
      });
    };

    Gui.prototype.showCategories = function(categories) {
      var element;
      element = this._createElementFor("#categories-template");
      $("#main").append(element);
      $("#categories-list-container").html('');
      this.addCategories(categories);
      $("#categories-list").fadeIn(500);
      return $(".nano").nanoScroller();
    };

    Gui.prototype.addCategories = function(categories) {
      var c, element, i, searchList, _i, _len,
        _this = this;
      i = 1;
      searchList = this.getAllCategoriesToSearch();
      for (_i = 0, _len = categories.length; _i < _len; _i++) {
        c = categories[_i];
        if (searchList.indexOf(i) < 0) {
          this.addCategoryToList(c, i, i * 300);
        }
        i = i + 1;
      }
      $(".add-category-container").click(function(e) {
        var element, id;
        element = $(e.target).parent();
        id = element.data('id');
        element.fadeOut(400, function() {
          return element.remove();
        });
        _this.addCategoryToSearch(categories, id);
        return $(".nano").nanoScroller();
      });
      element = this._createElementFor("#button-done-template");
      $("#button-done-conatiner").html('');
      $("#button-done-conatiner").append(element);
      $("#done-category").fadeIn(i * 400);
      return $("#done-category").click(this.hiddenCategories);
    };

    Gui.prototype.addCategoryToSearch = function(categories, categoryID) {
      var element,
        _this = this;
      element = this._createElementFor("#category-added-template", {
        category: categories[categoryID - 1],
        categoryID: categoryID
      });
      $("#list-category-added").append(element);
      element.fadeIn(500);
      $(".remove-category-container").click(function(e) {
        var id;
        element = $(e.target).parent();
        id = element.data('id');
        element.fadeOut(400, function() {}, element.remove());
        _this.addCategoryToList(categories[id - 1], id, 300);
        return $(".nano").nanoScroller();
      });
      return $(".nano").nanoScroller();
    };

    Gui.prototype.addCategoryToList = function(category, categoryID, fadeTime) {
      var element;
      element = this._createElementFor("#category-name-template", {
        category: category.name,
        categoryID: categoryID
      }).fadeIn(fadeTime);
      return $("#categories-list-container").append(element);
    };

    Gui.prototype.getAllCategoriesToSearch = function() {
      var element, idList, list, _i, _len;
      list = $("#list-category-added").children("span");
      idList = [];
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        element = list[_i];
        idList.push($(element).data('id'));
      }
      return idList;
    };

    Gui.prototype.hiddenCategories = function() {
      var _this = this;
      return $("#categories-list").fadeOut(500, function() {
        return $("#search_form").animate({
          left: '20%'
        });
      });
    };

    Gui.prototype.onSubmitLocation = function() {
      var city_name;
      city_name = $("#city_form input[name='city']").val();
      $("#restaurants-list").html('');
      this.findRestaurants(city_name);
      return false;
    };

    Gui.prototype._createElementFor = function(templateId, data) {
      var element, html, source, template;
      source = $(templateId).html();
      template = Handlebars.compile(source);
      html = template(data);
      return element = $(html);
    };

    Gui.prototype.findRestaurants = function(city_name) {};

    Gui.prototype.afterMoveFormSearch = function() {};

    return Gui;

  })();

  Glue = (function() {

    function Glue(useCase, serverSide, gui) {
      var _this = this;
      this.useCase = useCase;
      this.serverSide = serverSide;
      this.gui = gui;
      After(this.useCase, "start", function() {
        return _this.gui.showCityForm();
      });
      After(this.gui, "findRestaurants", function(city_name) {
        return _this.useCase.findRestaurants(city_name);
      });
      After(this.gui, "afterMoveFormSearch", function() {
        return _this.useCase.findCategories();
      });
      After(this.useCase, "getRestarantsForCity", function(city_name) {
        return _this.serverSide.getRestarantsForCity(city_name);
      });
      After(this.useCase, "getCategories", function() {
        return _this.serverSide.getCategories();
      });
      After(this.serverSide, 'restaurantsLoaded', function(restaurants) {
        return _this.useCase.setRestaurants(restaurants);
      });
      After(this.serverSide, 'categoriesLoaded', function(categories) {
        return _this.useCase.setCategories(categories);
      });
      After(this.useCase, "setRestaurants", function(restaurants) {
        return _this.gui.showRestaurants(restaurants);
      });
      After(this.useCase, "setCategories", function(categories) {
        return _this.gui.showCategories(categories);
      });
    }

    return Glue;

  })();

  App = (function() {

    function App() {
      this.users = __bind(this.users, this);

      this.start = __bind(this.start, this);
      this.useCase = new UseCase();
      this.serverSide = new ServerSide(this.useCase);
      this.gui = new Gui(this.useCase);
      this.glue = new Glue(this.useCase, this.serverSide, this.gui);
      console.log("halo");
    }

    App.prototype.start = function() {
      return this.useCase.start();
    };

    App.prototype.users = function() {};

    return App;

  })();

  $(function() {
    var app;
    app = new App();
    return app.start();
  });

}).call(this);
